service: resume-parser
# useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  # Our stage and region is based on what is passed in when running serverless commands.
  stage: ${opt:stage}
  region: ${opt:region}
  timeout: 30 # API Gateway has a maximum timeout of 30 seconds
  logRetentionInDays: 1
  # Uncommnent later
  # versionFunctions: false
  # Enables tracing
  # tracing:
  #   apiGateway: true
  #   lambda: true
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stage: ${opt:stage}
    region: ${opt:region}
    NODE_OPTIONS: --enable-source-maps
    bucketsuffix: ${env:bucketsuffix}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    # DynamoDB Table Names
    JOBS_TABLE_NAME: ${self:custom.jobsTable}
    RESUMES_TABLE_NAME: ${self:custom.resumesTable}
    MATCH_SCORES_TABLE_NAME: ${self:custom.matchScoresTable}
    PROCESSING_QUEUE_TABLE_NAME: ${self:custom.processingQueueTable}
    # SQS Queue URLs
    RESUME_PROCESSING_QUEUE_URL: 
      Ref: ResumeProcessingQueue
    SKILL_EXTRACTION_QUEUE_URL:
      Ref: SkillExtractionQueue
    SCORING_QUEUE_URL:
      Ref: ScoringQueue
    # S3 Bucket
    RESUME_S3_BUCKET: ${self:custom.resumebucket}
    # EVENT_QUEUE_URL: 
    #   Ref: EventQueue
    REST_ENDPOINT:
      Fn::Join:
        - ""
        - - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${opt:stage}

  iam:
    role:
      statements:

        # SQS
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            # - "Fn::GetAtt": [ EventQueue, Arn ]
            # - "Fn::GetAtt": [ EventQueueDLQ, Arn ]
            - "Fn::GetAtt": [ ResumeProcessingQueue, Arn ]
            - "Fn::GetAtt": [ SkillExtractionQueue, Arn ]
            - "Fn::GetAtt": [ ScoringQueue, Arn ]
            - "Fn::GetAtt": [ ResumeProcessingDLQ, Arn ]
            - "Fn::GetAtt": [ SkillExtractionDLQ, Arn ]
            - "Fn::GetAtt": [ ScoringDLQ, Arn ]

        # JobsTable
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - { "Fn::GetAtt": [JobsTable, Arn] }
            - Fn::Join:
                - "/"
                - - { "Fn::GetAtt": ["JobsTable", "Arn"] }
                  - "index/*"

        # ResumesTable
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - { "Fn::GetAtt": [ResumesTable, Arn] }
            - Fn::Join:
                - "/"
                - - { "Fn::GetAtt": ["ResumesTable", "Arn"] }
                  - "index/*"

        # MatchScoresTable
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - { "Fn::GetAtt": [MatchScoresTable, Arn] }
            - Fn::Join:
                - "/"
                - - { "Fn::GetAtt": ["MatchScoresTable", "Arn"] }
                  - "index/*"

        # ProcessingQueueTable
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - { "Fn::GetAtt": [ProcessingQueueTable, Arn] }
            - Fn::Join:
                - "/"
                - - { "Fn::GetAtt": ["ProcessingQueueTable", "Arn"] }
                  - "index/*"

        # S3 Bucket
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:DeleteObject
            - s3:AbortMultipartUpload
            - s3:ListMultipartUploadParts
            - s3:ListBucketMultipartUploads
          Resource:
            - "Fn::GetAtt": [resumebucket, Arn]

plugins:
  - serverless-prune-plugin

custom:
  # Our stage and region is based on what is we have set in the provider section. Or fallsback to what we have set in .env file.
  stage: ${self:provider.stage}
  region: ${self:provider.region}
  jobsTable: jobsTable-${self:provider.stage}
  resumesTable: resumesTable-${self:provider.stage}
  matchScoresTable: matchScoresTable-${self:provider.stage}
  processingQueueTable: processingQueueTable-${self:provider.stage}
  resumebucket: resume-parser-eightfold-${env:bucketsuffix} #this needs to come from provider and should be universal to file
  # EventQueue: EventStandardQueue-${self:provider.stage}
  deletionPolicy: 
    production: Retain
    other: Delete
  pointInTimeRecoveryEnabled: 
    production: true # please change the name production to new stage name for production app backednd
    other: false
  memorySize: 
    production: 9216
    other: 1024
    # other: 9216
    
  # webpack:
  #   webpackConfig: ./webpack.config.js
  #   includeModules:
  #     forceExclude:
  #       - aws-sdk
  
  # bundle:
  #   linting: true
  #   esbuild: true
  #   disableForkTsChecker: true
  #   generateStatsFiles: true

  # Built-in ESBuild configuration for Serverless Framework v4
build:
  esbuild:
    # Enable or Disable bundling the function code and dependencies into a single file. (Default: true)
    bundle: true
    # NPM packages to not be bundled, and instead be available in node_modules, and the zip file uploaded to Lambda.
    #
    # This property only makes sense if bundling is enabled.
    #
    # If no excludes (see below) are specified, and the runtime is set to nodejs16.x or lower,
    # we automatically add "aws-sdk" to the list of externals.
    #
    # If no excludes (see below) are specified, and the runtime is set to nodejs18.x or higher,
    # we automatically add "aws-sdk/*" to the list of externals.
    #
    # By default Framework will attempt to build and package all functions concurrently.
    # This property can bet set to a different number if you wish to limit the
    # concurrency of those operations.
    # buildConcurrency: 6
    # Enable or Disable minifying the built code. (Default: false)
    minify: true
    # Enable or configure sourcemaps, can be set to true or to an object with further configuration.
    sourcemap: true


  prune:
    automatic: true
    # includeLayers: true // Turning it on does not make any difference in overall lambda size
    number: 1

# Create an optimized package for our functions
package:
  individually: true
  exclude:
    - node_modules/pdf-parse/test/**

functions:
  # Resume Upload Handler
  ResumeUploadHandler:
    handler: src/handlers/resumeUpload.main
    memorySize: 1024  # Reduced from 2048MB
    timeout: 30       # Reduced from 60s
    events:
      - http:
          path: resume/upload
          method: POST
          cors: true
          integration: lambda

  # Job Management Handlers
  JobsHandler:
    handler: src/handlers/jobs.main
    memorySize: 512   # Reduced from 1024MB
    timeout: 10       # Reduced from default
    events:
      - http:
          path: jobs
          method: any
          cors: true
          integration: lambda
      - http:
          path: jobs/{jobId}
          method: any
          cors: true
          integration: lambda

  # Match Scores Handler
  MatchScoresHandler:
    handler: src/handlers/matchScores.main
    memorySize: 512   # Reduced from 1024MB
    timeout: 10       # Reduced from default
    events:
      - http:
          path: matches
          method: any
          cors: true
          integration: lambda
      - http:
          path: matches/{jobId}
          method: any
          cors: true
          integration: lambda

  # Worker Functions - Optimized for batch processing
  ResumeParserWorker:
    handler: src/handlers/workers/resumeParser.main
    memorySize: 1024  # Reduced from 2048MB
    timeout: 60       # Reduced from 300s
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ResumeProcessingQueue, Arn]
          batchSize: 5                    # Process multiple messages
          maximumBatchingWindow: 10       # Wait up to 10s for batch
          functionResponseType: ReportBatchItemFailures

  SkillExtractorWorker:
    handler: src/handlers/workers/skillExtractor.main
    memorySize: 1024  # Reduced from 2048MB
    timeout: 120      # Reduced from 300s (LLM calls need more time)
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SkillExtractionQueue, Arn]
          batchSize: 3                    # Smaller batch for LLM operations
          maximumBatchingWindow: 5        # Shorter wait for LLM operations
          functionResponseType: ReportBatchItemFailures

  ScorerWorker:
    handler: src/handlers/workers/scorer.main
    memorySize: 1024  # Reduced from 2048MB
    timeout: 120      # Reduced from 300s (LLM calls need more time)
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ScoringQueue, Arn]
          batchSize: 3                    # Smaller batch for LLM operations
          maximumBatchingWindow: 5        # Shorter wait for LLM operations
          functionResponseType: ReportBatchItemFailures

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(src/resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(src/resources/dynamodb-table.yml)}
  # Bucket
  - ${file(src/resources/s3-bucket.yml)}
  # SQS
  - ${file(src/resources/sqs.yml)}